/*
Copyright (C) 2015 Runtime Revolution Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/*
This widget is a push button that dispatches mouse events to its script object.
This widget has three properties that can be set: theme; buttonStyle and label.
*/

-- declaring the extension as a widget, followed by the identifier
widget com.livecode.widget.badge

-- dependancy declarations
use com.livecode.canvas
use com.livecode.widget

-- metadata
metadata author is "LiveCode"
metadata version is "1.0.0"
metadata title is "Badge"

-- property declarations
property badgeColor 			get mColor 		set setColor
property badgeTextColor 	get mTextColor 		set setTextColor
property badgeLabel 			get mLabel 		set setLabel
--

-- private instance variables
private variable mColor as String
private variable mTextColor as String
private variable mLabel as String

private variable mState as String
--

-- constants

public handler OnSave(out rProperties as Array)
	put the empty array into rProperties

	put mColor into rProperties["color"]
	put mTextColor into rProperties["textcolor"]
	put mLabel into rProperties["label"]

	return rProperties
end handler

public handler OnLoad(in pProperties as Array)
	put pProperties["color"] into mColor
	put pProperties["textcolor"] into mTextColor
	put pProperties["label"] into mLabel
end handler

public handler OnCreate() returns nothing
	put "255,255,255" into mColor
	put "Label" into mLabel
	put "0,0,0" into mTextColor
    put "" into mState
end handler

public handler OnPaint() returns nothing
	set the paint of this canvas to solid paint with stringToColor(mColor)
	fill rectangle path of my bounds on this canvas

	set the font of this canvas to getFont("label")
   set the paint of this canvas to solid paint with stringToColor(mTextColor)
   fill text mLabel at center of my bounds on this canvas

    if mState is "depressed" then
      set the paint of this canvas to solid paint with color [0,0,0,0.2]
      fill rectangle path of my bounds on this canvas
   else if mState is "over" then
      set the paint of this canvas to solid paint with color [0,0,0,0.1]
      fill rectangle path of my bounds on this canvas
   end if
end handler

private handler getFont(in pType as String) returns Font
	variable tFont as Font
	put the font of this canvas into tFont

	if pType is "label" then
		set the size of tFont to 12
   end if

	return tFont
end handler

public handler OnMouseDown() returns nothing
	put "depressed" into mState
	redraw all

	post "mouseDown"
end handler
--
public handler OnMouseUp() returns nothing
	put "" into mState
	redraw all

    post "mouseUp"
end handler
--
public handler OnMouseEnter() returns nothing
	put "over" into mState
	redraw all
end handler
--
public handler OnMouseLeave() returns nothing
	if mState is not "pressed" then
		put "none" into mState
		redraw all
	end if
end handler

private handler setLabel(in pLabel as String) returns nothing
	put pLabel into mLabel
	redraw all
end handler

private handler setColor(in pColor as String) returns nothing
	 put pColor into mColor
	redraw all
end handler

private handler setTextColor(in pColor as String) returns nothing
   put pColor into mTextColor
	redraw all
end handler

-- this handler converts a string of numbers to an RGBA color
private handler stringToColor(in pString as String) returns Color
  variable tRed as Real
  variable tGreen as Real
  variable tBlue as Real
  variable tAlpha as Real

  variable tComponentList as List
  split pString by "," into tComponentList

  variable tComponentCount
  put the number of elements in tComponentList into tComponentCount
  if tComponentCount is not 3 and tComponentCount is not 4 then
      // Invalid number of components detected
      throw "Invalid color"
  end if

  put (element 1 of tComponentList) parsed as number into tRed
  put (element 2 of tComponentList) parsed as number into tGreen
  put (element 3 of tComponentList) parsed as number into tBlue

  if tComponentCount is 4 then
      put (element 4 of tComponentList) parsed as number into tAlpha
  else
      put 255 into tAlpha
  end if

  return color [ tRed/255, tGreen/255, tBlue/255, tAlpha/255 ]
end handler

end widget
