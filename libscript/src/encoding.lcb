/* Copyright (C) 2017 LiveCode Ltd.
 
 This file is part of LiveCode.
 
 LiveCode is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License v3 as published by the Free
 Software Foundation.
 
 LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/**
This library consists of the basic encoding operations included in the 
standard library of LiveCode Builder.
*/

module com.livecode.encoding

use com.livecode.foreign

public foreign handler MCEncodingExecCompressUsingZlib(in pData as Data) returns Data binds to "<builtin>"
public foreign handler MCEncodingExecDecompressUsingZlib(in pData as Data) returns Data binds to "<builtin>"
public foreign handler MCEncodingEvalIsCompressedUsingZlib(in pData as Data, out rResult as CBool) returns nothing binds to "<builtin>"

public foreign handler MCEncodingExecEncodeUsingBase64(in pData as Data) returns String binds to "<builtin>"
public foreign handler MCEncodingExecDecodeUsingBase64(in pBase64 as String) returns Data binds to "<builtin>"

public foreign handler MCEncodingExecEncodeForLegacyUrl(in pString as String) returns String binds to "<builtin>"
public foreign handler MCEncodingExecDecodeFromLegacyUrl(in pUrlEncoded as String) returns String binds to "<builtin>"

public foreign handler MCEncodingExecEncodeForUrl(in pString as String) returns String binds to "<builtin>"
public foreign handler MCEncodingExecDecodeFromUrl(in pUrlEncoded as String) returns String binds to "<builtin>"

--

/*
syntax EncodeValue is statement
   "the" "encoded" "of" <Target: Expression>
begin 
    EvalEncodedOfValue(Target, output)
end syntax

syntax DecodeValue is statement
    "the" "decoded" "of" <Target: Expression>
begin 
    EvalDecodedOfValue(Target, output)
end syntax
*/
--

syntax CompressData is statement
   "compress" <Target: Expression> ["using" "zlib"]
begin 
    MCEncodingExecCompressUsingZlib(Target)
end syntax

syntax DecompressData is statement
    "decompress" <Target: Expression> ["using" "zlib"]
begin 
    MCEncodingExecDecompressUsingZlib(Target)
end syntax

syntax IsCompressed is postfix operator with function chunk precedence
	<Target: Expression> "is" "compressed" ["using" "zlib"]
begin 
    MCEncodingEvalIsCompressedUsingZlib(Target, output)
end syntax

--

syntax EncodeUsingBase64 is statement
	"encode" <Source: Expression> "using" "base" "sixty-four"
begin
    MCEncodingExecEncodeUsingBase64(Source)
end syntax

syntax DecodeUsingBase64 is statement
	"decode" <Source: Expression> "using" "base" "sixty-four"
begin
    MCEncodingExecDecodeUsingBase64(Source)
end syntax

--
/*
syntax EncodeUsingBinary is statement
"encode" <Source: Expression> "using" "binary" "format" <Format: Expression> ["into" <Target: Expression>]
begin
    ExecEncodeUsingBinary(Source, Format, Source)
    ExecEncodeUsingBinary(Source, Format, Target)
end syntax

syntax DecodeUsingBinary is statement
   "decode" <Source: Expression> "using" "binary" "format" <Format: Expression> ["into" <Target: Expression>]
begin
    ExecDecodeUsingBinary(Source, Format, Source)
    ExecDecodeUsingBinary(Source, Format, Target)
end syntax
*/
--

/*
syntax EncodeTextUsingUTF8 is statement
    "encode" <Target: Expression> "using" "utf8"
begin
    ExecEncodeTextUsingUTF8(Target, Target)
end syntax

syntax DecodeTextUsingUTF8 is statement
    "decode" <Target: Expression> "using" "utf8"
begin
    ExecDecodeTextUsingUTF8(Target, Target)
end syntax

syntax EncodeTextUsingUTF16 is statement
    "encode" <Target: Expression> "using" "utf16"
begin
    ExecEncodeTextUsingUTF16(Target, Target)
end syntax

syntax DecodeTextUsingUTF16 is statement
    "decode" <Target: Expression> "using" "utf16"
begin
    ExecDecodeTextUsingUTF16(Target, Target)
end syntax

syntax EncodeTextUsingUTF32 is statement
    "encode" <Target: Expression> "using" "utf32"
begin
    ExecEncodeTextUsingUTF32(Target, Target)
end syntax

syntax DecodeTextUsingUTF32 is statement
    "decode" <Target: Expression> "using" "utf32"
begin
    ExecDecodeTextUsingUTF32(Target, Target)
end syntax

syntax EncodeTextUsingAscii is statement
    "encode" <Target: Expression> "using" "ascii"
begin
    ExecEncodeTextUsingUTF8(Target, Target)
end syntax

syntax DecodeTextUsingASCII is statement
    "decode" <Target: Expression> "using" "ascii"
begin
    ExecDecodeTextUsingASCII(Target, Target)
end syntax
*/
--

syntax EncodeForLegacyURL is statement
    "encode" <Target: Expression> "for" "legacy" "url"
begin
    MCEncodingExecEncodeForLegacyUrl(Target)
end syntax

syntax DecodeFromLegacyURL is statement
    "decode" <Target: Expression> "from" "legacy" "url"
begin
    MCEncodingExecDecodeFromLegacyUrl(Target)
end syntax

syntax EncodeForURL is statement
    "encode" <Target: Expression> "for" "url"
begin
    MCEncodingExecEncodeForUrl(Target)
end syntax

syntax DecodeFromURL is statement
    "decode" <Target: Expression> "from" "url"
begin
    MCEncodingExecDecodeFromUrl(Target)
end syntax

--

end module
